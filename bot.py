import os
import logging
import requests
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, MenuButtonWebApp, WebAppInfo
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
    MessageHandler,
    filters,
)
from dotenv import load_dotenv

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
load_dotenv()
TOKEN = os.getenv("TELEGRAM_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID"))
WEATHERAPI_KEY = os.getenv("WEATHERAPI_KEY")

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤–æ–¥–æ—ë–º–æ–≤
WATER_POINTS = {
    "–®–µ–±–µ–Ω—å–≥—Å–∫–æ–µ –æ–∑–µ—Ä–æ": {
        "coords": [60.600, 43.450],
        "fish_rating": 4,
        "depth": "4-8 –º",
        "fish_types": ["—â—É–∫–∞", "–æ–∫—É–Ω—å", "–ø–ª–æ—Ç–≤–∞"],
        "photo": "https://example.com/shebeng.jpg"
    },
    "–û–∑–µ—Ä–æ –†–æ–º–∞—à–µ–≤—Å–∫–æ–µ": {
        "coords": [60.489, 43.352],
        "fish_rating": 3,
        "depth": "5-10 –º",
        "fish_types": ["–ª–µ—â", "–æ–∫—É–Ω—å", "—è–∑—å"],
        "photo": "https://example.com/romashev.jpg"
    }
}

WIND_LEVELS = {
    (0, 0.3): ("üåÄ –ë–µ–∑–≤–µ—Ç—Ä–∏–µ", "üé£ –ò–¥–µ–∞–ª—å–Ω–æ –¥–ª—è —Ä—ã–±–∞–ª–∫–∏"),
    (0.3, 1.5): ("üå¨ –õ–µ–≥–∫–∏–π –≤–µ—Ç–µ—Ä–æ–∫", "üé£ –û—Ç–ª–∏—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è"),
    (1.5, 3.3): ("üçÉ –£–º–µ—Ä–µ–Ω–Ω—ã–π –≤–µ—Ç–µ—Ä", "üé£ –•–æ—Ä–æ—à–∏–π –∫–ª—ë–≤"),
    (3.3, 5.4): ("üå™ –°–∏–ª—å–Ω—ã–π –≤–µ—Ç–µ—Ä", "üé£ –†—ã–±–∞ –∫–ª—é–µ—Ç –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ"),
    (5.4, float('inf')): ("‚ö†Ô∏è –®—Ç–æ—Ä–º–æ–≤–æ–π –≤–µ—Ç–µ—Ä", "‚ùå –ù–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ –¥–ª—è –ª–æ–≤–ª–∏")
}

class FishingBot:
    @staticmethod
    def get_pressure_status(pressure_mb):
        if pressure_mb < 1000:
            return "–Ω–∏–∑–∫–æ–µ", "üü¢ –ë–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ–µ"
        elif 1000 <= pressure_mb <= 1010:
            return "—Å—Ä–µ–¥–Ω–µ–µ", "üü° –ù–æ—Ä–º–∞–ª—å–Ω–æ–µ"
        return "–≤—ã—Å–æ–∫–æ–µ", "üî¥ –ù–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ–µ"

    @staticmethod
    def get_wind_description(wind_speed):
        for (min_speed, max_speed), (description, fishing_tip) in WIND_LEVELS.items():
            if min_speed <= wind_speed < max_speed:
                return description, fishing_tip
        return "üå´ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ", ""

    @staticmethod
    async def send_menu(update: Update):
        keyboard = [
            [InlineKeyboardButton(name, callback_data=name)]
            for name in WATER_POINTS.keys()
        ]
        await update.message.reply_text(
            "üé£ <b>–†—ã–±–æ–ª–æ–≤–Ω—ã–π –≥–∏–¥</b>\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–¥–æ—ë–º:",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="HTML"
        )

    @staticmethod
    async def get_weather_report(point_name: str, point_data: dict):
        try:
            lat, lon = point_data["coords"]
            url = f"http://api.weatherapi.com/v1/current.json?key={WEATHERAPI_KEY}&q={lat},{lon}&lang=ru"
            response = requests.get(url, timeout=10)
            response.raise_for_status()
            weather = response.json()["current"]
            
            wind_speed = weather["wind_kph"] * 0.277778
            pressure_status, pressure_emoji = FishingBot.get_pressure_status(weather["pressure_mb"])
            wind_desc, wind_tip = FishingBot.get_wind_description(wind_speed)
            
            return (
                f"üåä <b>{point_name}</b>\n"
                f"üìç –ì–ª—É–±–∏–Ω–∞: {point_data['depth']}\n"
                f"üêü –†—ã–±–∞: {', '.join(point_data['fish_types'])}\n\n"
                f"üé£ <b>–ü—Ä–æ–≥–Ω–æ–∑ –∫–ª—ë–≤–∞:</b>\n"
                f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: {'‚≠ê' * point_data['fish_rating']}\n"
                f"‚è≤ –î–∞–≤–ª–µ–Ω–∏–µ: {weather['pressure_mb']} –≥–ü–∞ ({pressure_status}) {pressure_emoji}\n"
                f"{wind_desc} - {wind_tip}\n\n"
                f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {weather['temp_c']}¬∞C\n"
                f"üí® –í–µ—Ç–µ—Ä: {wind_speed:.1f} –º/—Å ({weather['wind_dir']})\n"
                f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {weather['humidity']}%\n\n"
                f"üïí –û–±–Ω–æ–≤–ª–µ–Ω–æ: {weather['last_updated']}"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã: {e}")
            return None

async def setup_menu(app: Application):
    await app.bot.set_chat_menu_button(
        menu_button=MenuButtonWebApp(
            text="–û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç—É",
            web_app=WebAppInfo(url="https://fishing-bot.vercel.app")
        )
    )

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üåê –û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç—É", web_app=WebAppInfo(url="https://fishing-bot.vercel.app"))],
            [InlineKeyboardButton("üé£ –°–ø–∏—Å–æ–∫ –≤–æ–¥–æ—ë–º–æ–≤", callback_data="menu")]
        ])
    )

# [–û—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ handle_water_point, back_to_menu –∏ —Ç.–¥. –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π]

def main():
    app = Application.builder().token(TOKEN).post_init(setup_menu).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("stop", stop_bot))
    app.add_handler(CallbackQueryHandler(handle_water_point, pattern="^(?!back|menu).*$"))
    app.add_handler(CallbackQueryHandler(back_to_menu, pattern="^back$"))
    app.add_handler(CallbackQueryHandler(start, pattern="^menu$"))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    app.add_error_handler(error_handler)
    
    app.run_polling()

if __name__ == "__main__":
    main()